// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// 🔹 schema.prisma
// 사용자, 지병, 증상, 증상기록, 예측 모델 구조 정의

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String         @id @default(uuid())
  email       String         @unique
  password    String
  name        String?
  gender      String
  age         Int
  height      Float
  weight      Float
  bmi         Float
  medications UserMedication[]
  diseases    UserDisease[]  // N:M
  records     SymptomRecord[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Disease {
  sickCode     String @id @map("id")  // 질병 코드
  name         String @unique         // 한글명
  englishName  String?                // 영문명
  description  String?
  tips         String?
  category    String?
  users        UserDisease[]
}

model UserDisease {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  disease   Disease  @relation(fields: [diseaseId], references: [sickCode])
  diseaseId String

  @@unique([userId, diseaseId])
}

model Medication {
  id           String   @id @default(uuid())
  name         String   @unique       // 제품명 (itemName)
  itemSeq      String   @unique       // 품목기준코드
  entpName     String?                // 업체명
  efcy         String?                // 효능
  useMethod    String?                // 사용법
  atpnWarn     String?                // 주의사항(경고)
  atpn         String?                // 주의사항
  intrc        String?                // 상호작용
  se           String?                // 부작용
  depositMethod String?               // 보관법
  openDate     String?                // 공개일자
  updateDate   String?                // 수정일자
  imageUrl     String?                // 낱알 이미지 URL

  users        UserMedication[]       // 연결된 사용자들
}

model UserMedication {
  id           String     @id @default(uuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  medication   Medication @relation(fields: [medicationId], references: [id])
  medicationId String

  @@unique([userId, medicationId])
}

model Symptom {
  id       String           @id @default(uuid())
  name     String           @unique
  records  SymptomOnRecord[]
  category String
}

model SymptomRecord {
  id         String           @id @default(uuid())
  user       User             @relation(fields: [userId], references: [id])
  userId     String
  symptoms   SymptomOnRecord[]
  prediction Prediction?
  createdAt  DateTime         @default(now())
}

model SymptomOnRecord {
  id        String         @id @default(uuid())
  symptom   Symptom        @relation(fields: [symptomId], references: [id])
  symptomId String
  record    SymptomRecord  @relation(fields: [recordId], references: [id])
  recordId  String

  timeOfDay String?        // "morning", "afternoon", "evening", "night" 중 하나

  @@unique([symptomId, recordId])
}

model Prediction {
  id           String         @id @default(uuid())
  record       SymptomRecord  @relation(fields: [recordId], references: [id])
  recordId     String         @unique

  coarseLabel  String         // 최종 coarse
  fineLabel    String         // 최종 fine
  riskScore    Float
  riskLevel    String
  guideline    String
  elapsedSec   Float?

  ranks        PredictionRank[]
  createdAt    DateTime       @default(now())
}

model PredictionRank {
  id           String     @id @default(uuid())
  prediction   Prediction @relation(fields: [predictionId], references: [id])
  predictionId String

  rank         Int        // 1, 2, 3...
  coarseLabel  String
  fineLabel    String
  riskScore    Float

  @@unique([predictionId, rank])
}
